import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Importing the dataset
try:
    dataset = pd.read_csv('Position_Salaries.csv')
except FileNotFoundError:
    print("File not found. Please check the file path.")
    raise

# Check dataset
print(dataset.head())  # Display the first few rows
print(dataset.isnull().sum())  # Check for missing values

# Step 2: Preparing the data
X = dataset.iloc[:, 1:-1].values  # Features
y = dataset.iloc[:, -1].values      # Target variable

# Step 3: Training the Linear Regression model
lin_reg = LinearRegression()
lin_reg.fit(X, y)

# Step 4: Training the Polynomial Regression model
poly_reg = PolynomialFeatures(degree=4)
X_poly = poly_reg.fit_transform(X)
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly, y)

# Step 5: Model Evaluation
y_pred_linear = lin_reg.predict(X)
y_pred_poly = lin_reg_2.predict(X_poly)
print("Linear Regression MSE:", mean_squared_error(y, y_pred_linear))
print("Polynomial Regression MSE:", mean_squared_error(y, y_pred_poly))
print("Linear Regression R²:", r2_score(y, y_pred_linear))
print("Polynomial Regression R²:", r2_score(y, y_pred_poly))

# Step 6: Visualizing Linear Regression results
plt.scatter(X, y, color='red')
plt.plot(X, lin_reg.predict(X), color='blue')
plt.title('Truth or Bluff (Linear Regression)')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.show()

# Step 7: Visualizing Polynomial Regression results
plt.scatter(X, y, color='red')
plt.plot(X, lin_reg_2.predict(X_poly), color='blue')
plt.title('Truth or Bluff (Polynomial Regression)')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.show()

# Step 8: Higher resolution plot for Polynomial Regression
X_grid = np.arange(min(X), max(X), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(X, y, color='red')
plt.plot(X_grid, lin_reg_2.predict(poly_reg.transform(X_grid)), color='blue')
plt.title('Truth or Bluff (Polynomial Regression)')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.show()

# Step 9: Predictions
try:
    linear_prediction = lin_reg.predict([[6.5]])
    poly_prediction = lin_reg_2.predict(poly_reg.transform([[6.5]]))
    print("Linear Regression Prediction for level 6.5:", linear_prediction)
    print("Polynomial Regression Prediction for level 6.5:", poly_prediction)
except Exception as e:
    print("Error during prediction:", e)
